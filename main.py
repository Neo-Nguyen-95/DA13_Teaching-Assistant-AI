#%% LIBRARY
from openai import OpenAI
import streamlit as st
from business import get_knowledge_text, retrieve_relevant_knowledge

# from dotenv import load_dotenv
# import os
# load_dotenv()
# openai_api_key = os.getenv("SECRETE_KEY")

#%% SIDER BAR INFOR & SIGN IN
st.set_page_config(
    page_title = 'Physics Assistant',
    page_icon = 'üîß'
    )

with st.sidebar:
    st.image('teacher_image.png')
    st.markdown("""
                **GI·ªöI THI·ªÜU**
                
                Xin ch√†o c√°c em ƒë√£ ƒë·∫øn v·ªõi tr·ª£ l√≠ ·∫£o h·ªçc t·∫≠p c·ªßa th·∫ßy, Neon. 
                Neon s·ª≠ d·ª•ng c√¥ng ngh·ªá tr√≠ tu·ªá nh√¢n t·∫°o, c√≥ th·ªÉ gi√∫p
                c√°c em gi·∫£i ƒë√°p th·∫Øc m·∫Øc trong gi·ªù h·ªçc c·ªßa th·∫ßy.
                
                
                **ƒêƒÇNG NH·∫¨P**
                
                """)
      
    # To be delete later
    # openai_api_key = st.text_input("OpenAI API Key",
    #                                key="API key",
    #                                type="password")
    
    openai_api_key = st.secrets["api"]["key"]
    
    passcode = st.text_input("Nh·∫≠p code ƒë·ªÉ s·ª≠ d·ª•ng ph·∫ßn m·ªÅm",
                             type="password")
    
    # passcode_system = st.secrets["passcode"]["key"]
    # passcode_system = "1234"
    
#%% INPUT FOR AI
knowledge_text = get_knowledge_text()

sys_msg = """
B·∫°n l√† m·ªôt gi√°o vi√™n v·∫≠t l√≠, b·∫°n ch·ªâ tr·∫£ l·ªùi c√¢u h·ªèi b·∫±ng ki·∫øn th·ª©c v·∫≠t l√≠. 
N·∫øu c√¢u h·ªèi kh√¥ng trong s√°ng, t·ª´ ch·ªëi tr·∫£ l·ªùi m·ªôt c√°ch l·ªÖ ph√©p.
S·ª≠ d·ª•ng ng√¥n ng·ªØ trong s√°ng. N·∫øu c√≥ c√¥ng th·ª©c to√°n h·ªçc, vi·∫øt ·ªü gi·ªØa hai d·∫•u $.
Tr·∫£ l·ªùi ng·∫Øn g·ªçn trong kho·∫£ng √≠t h∆°n 300 t·ª´.
        """
        
#%% MAIN SECTION
st.title("Neon AI")
st.caption("Tr·ª£ gi·∫£ng Khoa h·ªçc t·ª± nhi√™n t·ª´ Tr√≠ tu·ªá nh√¢n t·∫°o")

if "messages" not in st.session_state:
    # Initial key-value in session state
    st.session_state["messages"] = [
        {"role": "system",
         "content": sys_msg},
        
        # Welcome message
        {"role": "assistant", 
         "content": 
             """Xin ch√†o, m√¨nh l√† tr·ª£ l√≠ ·∫£o c·ªßa th·∫ßy D≈©ng, gi√°o vi√™n t·∫°i 
             STEM SPACE.
             M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?
             """
         }
        ]
    
# Show conversation: role-by-role
for msg in st.session_state.messages:
    if msg["role"] in ["assistant", "user"]:
        st.chat_message(msg["role"]).write(msg["content"])
    

    
if prompt := st.chat_input():  # Chat box

    # if not openai_api_key:
    #     st.info("Please add your key")
    #     st.stop()
        
    if len(passcode) == 0:
        st.info("Code kh√¥ng h·ª£p l·ªá, xin th·ª≠ l·∫°i!")
        st.stop()
        
    # Show what the user types
    st.chat_message("user").write(prompt)
    
    # Retrieve relevant knowledge from prompt
    relevant_knowledge = retrieve_relevant_knowledge(
        knowledge_text,
        "knowledge_index.faiss",
        prompt,
        top_k=3
        )
    
    
    st.session_state.messages.append(
        {"role": "system", "content": f"""
        Tham kh·∫£o th√™m ki·∫øn th·ª©c t·ª´ {relevant_knowledge}
        """}
        )
    
    
    # Add user's promp to message history (stored in session state)    
    st.session_state.messages.append(
        {"role": "user", "content": prompt}
        )

    client = OpenAI(api_key=openai_api_key)
    
    # st.session_state.messages
    
    # Get response from API & store it in session state
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages = st.session_state.messages  # Input full chat history
        )
    
    msg = response.choices[0].message.content  # Current response
    
    st.session_state.messages.append(
        {"role": "assistant", "content": msg}
        )
    
    # Show reponse
    with st.chat_message("assistant"):
        st.markdown(msg.replace('\[', '$').replace('\]','$'))
    